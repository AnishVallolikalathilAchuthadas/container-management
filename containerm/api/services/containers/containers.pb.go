// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/services/containers/containers.proto

package containers

import (
	context "context"
	fmt "fmt"
	containers "github.com/eclipse-kanto/container-management/containerm/api/types/containers"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListContainersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListContainersRequest) Reset()         { *m = ListContainersRequest{} }
func (m *ListContainersRequest) String() string { return proto.CompactTextString(m) }
func (*ListContainersRequest) ProtoMessage()    {}
func (*ListContainersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{0}
}

func (m *ListContainersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListContainersRequest.Unmarshal(m, b)
}
func (m *ListContainersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListContainersRequest.Marshal(b, m, deterministic)
}
func (m *ListContainersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListContainersRequest.Merge(m, src)
}
func (m *ListContainersRequest) XXX_Size() int {
	return xxx_messageInfo_ListContainersRequest.Size(m)
}
func (m *ListContainersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListContainersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListContainersRequest proto.InternalMessageInfo

type CreateContainerRequest struct {
	Container            *containers.Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateContainerRequest) Reset()         { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()    {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{1}
}

func (m *CreateContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateContainerRequest.Unmarshal(m, b)
}
func (m *CreateContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateContainerRequest.Marshal(b, m, deterministic)
}
func (m *CreateContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateContainerRequest.Merge(m, src)
}
func (m *CreateContainerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateContainerRequest.Size(m)
}
func (m *CreateContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateContainerRequest proto.InternalMessageInfo

func (m *CreateContainerRequest) GetContainer() *containers.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type CreateContainerResponse struct {
	Container            *containers.Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateContainerResponse) Reset()         { *m = CreateContainerResponse{} }
func (m *CreateContainerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateContainerResponse) ProtoMessage()    {}
func (*CreateContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{2}
}

func (m *CreateContainerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateContainerResponse.Unmarshal(m, b)
}
func (m *CreateContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateContainerResponse.Marshal(b, m, deterministic)
}
func (m *CreateContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateContainerResponse.Merge(m, src)
}
func (m *CreateContainerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateContainerResponse.Size(m)
}
func (m *CreateContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateContainerResponse proto.InternalMessageInfo

func (m *CreateContainerResponse) GetContainer() *containers.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type GetContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContainerRequest) Reset()         { *m = GetContainerRequest{} }
func (m *GetContainerRequest) String() string { return proto.CompactTextString(m) }
func (*GetContainerRequest) ProtoMessage()    {}
func (*GetContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{3}
}

func (m *GetContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetContainerRequest.Unmarshal(m, b)
}
func (m *GetContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetContainerRequest.Marshal(b, m, deterministic)
}
func (m *GetContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContainerRequest.Merge(m, src)
}
func (m *GetContainerRequest) XXX_Size() int {
	return xxx_messageInfo_GetContainerRequest.Size(m)
}
func (m *GetContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetContainerRequest proto.InternalMessageInfo

func (m *GetContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetContainerResponse struct {
	Container            *containers.Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetContainerResponse) Reset()         { *m = GetContainerResponse{} }
func (m *GetContainerResponse) String() string { return proto.CompactTextString(m) }
func (*GetContainerResponse) ProtoMessage()    {}
func (*GetContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{4}
}

func (m *GetContainerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetContainerResponse.Unmarshal(m, b)
}
func (m *GetContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetContainerResponse.Marshal(b, m, deterministic)
}
func (m *GetContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContainerResponse.Merge(m, src)
}
func (m *GetContainerResponse) XXX_Size() int {
	return xxx_messageInfo_GetContainerResponse.Size(m)
}
func (m *GetContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetContainerResponse proto.InternalMessageInfo

func (m *GetContainerResponse) GetContainer() *containers.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type ListContainersResponse struct {
	Containers           []*containers.Container `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListContainersResponse) Reset()         { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()    {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{5}
}

func (m *ListContainersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListContainersResponse.Unmarshal(m, b)
}
func (m *ListContainersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListContainersResponse.Marshal(b, m, deterministic)
}
func (m *ListContainersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListContainersResponse.Merge(m, src)
}
func (m *ListContainersResponse) XXX_Size() int {
	return xxx_messageInfo_ListContainersResponse.Size(m)
}
func (m *ListContainersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListContainersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListContainersResponse proto.InternalMessageInfo

func (m *ListContainersResponse) GetContainers() []*containers.Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ListContainerMessage struct {
	Container            *containers.Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListContainerMessage) Reset()         { *m = ListContainerMessage{} }
func (m *ListContainerMessage) String() string { return proto.CompactTextString(m) }
func (*ListContainerMessage) ProtoMessage()    {}
func (*ListContainerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{6}
}

func (m *ListContainerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListContainerMessage.Unmarshal(m, b)
}
func (m *ListContainerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListContainerMessage.Marshal(b, m, deterministic)
}
func (m *ListContainerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListContainerMessage.Merge(m, src)
}
func (m *ListContainerMessage) XXX_Size() int {
	return xxx_messageInfo_ListContainerMessage.Size(m)
}
func (m *ListContainerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ListContainerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ListContainerMessage proto.InternalMessageInfo

func (m *ListContainerMessage) GetContainer() *containers.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type StartContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartContainerRequest) Reset()         { *m = StartContainerRequest{} }
func (m *StartContainerRequest) String() string { return proto.CompactTextString(m) }
func (*StartContainerRequest) ProtoMessage()    {}
func (*StartContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{7}
}

func (m *StartContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartContainerRequest.Unmarshal(m, b)
}
func (m *StartContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartContainerRequest.Marshal(b, m, deterministic)
}
func (m *StartContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartContainerRequest.Merge(m, src)
}
func (m *StartContainerRequest) XXX_Size() int {
	return xxx_messageInfo_StartContainerRequest.Size(m)
}
func (m *StartContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartContainerRequest proto.InternalMessageInfo

func (m *StartContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AttachContainerRequest struct {
	// The id of the container to attach to
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the connection should be interactive - i.e. user input is allowed
	StdIn bool `protobuf:"varint,2,opt,name=std_in,json=stdIn,proto3" json:"std_in,omitempty"`
	// The offset from the beginning of the resource at which the data should be
	// written. It is required on all `WriteRequest`s.
	//
	// In the first `WriteRequest` of a `Write()` action, it indicates
	// the initial offset for the `Write()` call. The value **must** be equal to
	// the `committed_size` that a call to `QueryWriteStatus()` would return.
	//
	// On subsequent calls, this value **must** be set and **must** be equal to
	// the sum of the first `write_offset` and the sizes of all `data` bundles
	// sent previously on this stream.
	//
	// An incorrect value will cause an error.
	WriteOffset int64 `protobuf:"varint,3,opt,name=write_offset,json=writeOffset,proto3" json:"write_offset,omitempty"`
	// If `true`, this indicates that the write is complete. Sending any
	// `WriteRequest`s subsequent to one in which `finish_write` is `true` will
	// cause an error.
	FinishWrite bool `protobuf:"varint,4,opt,name=finish_write,json=finishWrite,proto3" json:"finish_write,omitempty"`
	// A portion of the data for the resource. The client **may** leave `data`
	// empty for any given `WriteRequest`. This enables the client to inform the
	// service that the request is still live while it is running an operation to
	// generate more data.
	DataToWrite []byte `protobuf:"bytes,10,opt,name=data_to_write,json=dataToWrite,proto3" json:"data_to_write,omitempty"`
	// The offset for the first byte to return in the read, relative to the start
	// of the resource.
	//
	// A `read_offset` that is negative or greater than the size of the resource
	// will cause an `OUT_OF_RANGE` error.
	ReadOffset int64 `protobuf:"varint,5,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// The maximum number of `data` bytes the server is allowed to return in the
	// sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
	// there is no limit, and a negative `read_limit` will cause an error.
	//
	// If the stream returns fewer bytes than allowed by the `read_limit` and no
	// error occurred, the stream includes all data from the `read_offset` to the
	// end of the resource.
	ReadLimit            int64    `protobuf:"varint,6,opt,name=read_limit,json=readLimit,proto3" json:"read_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachContainerRequest) Reset()         { *m = AttachContainerRequest{} }
func (m *AttachContainerRequest) String() string { return proto.CompactTextString(m) }
func (*AttachContainerRequest) ProtoMessage()    {}
func (*AttachContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{8}
}

func (m *AttachContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachContainerRequest.Unmarshal(m, b)
}
func (m *AttachContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachContainerRequest.Marshal(b, m, deterministic)
}
func (m *AttachContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachContainerRequest.Merge(m, src)
}
func (m *AttachContainerRequest) XXX_Size() int {
	return xxx_messageInfo_AttachContainerRequest.Size(m)
}
func (m *AttachContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttachContainerRequest proto.InternalMessageInfo

func (m *AttachContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AttachContainerRequest) GetStdIn() bool {
	if m != nil {
		return m.StdIn
	}
	return false
}

func (m *AttachContainerRequest) GetWriteOffset() int64 {
	if m != nil {
		return m.WriteOffset
	}
	return 0
}

func (m *AttachContainerRequest) GetFinishWrite() bool {
	if m != nil {
		return m.FinishWrite
	}
	return false
}

func (m *AttachContainerRequest) GetDataToWrite() []byte {
	if m != nil {
		return m.DataToWrite
	}
	return nil
}

func (m *AttachContainerRequest) GetReadOffset() int64 {
	if m != nil {
		return m.ReadOffset
	}
	return 0
}

func (m *AttachContainerRequest) GetReadLimit() int64 {
	if m != nil {
		return m.ReadLimit
	}
	return 0
}

type AttachContainerResponse struct {
	// The id of the container to attach to
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the connection should be interactive - i.e. user input is allowed
	StdIn bool `protobuf:"varint,2,opt,name=std_in,json=stdIn,proto3" json:"std_in,omitempty"`
	// The number of bytes that have been processed for the given resource.
	WriteCommittedSize int64 `protobuf:"varint,3,opt,name=write_committed_size,json=writeCommittedSize,proto3" json:"write_committed_size,omitempty"`
	// A portion of the data for the resource. The service **may** leave `data`
	// empty for any given `ReadResponse`. This enables the service to inform the
	// client that the request is still live while it is running an operation to
	// generate more data.
	ReadData             []byte   `protobuf:"bytes,10,opt,name=read_data,json=readData,proto3" json:"read_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachContainerResponse) Reset()         { *m = AttachContainerResponse{} }
func (m *AttachContainerResponse) String() string { return proto.CompactTextString(m) }
func (*AttachContainerResponse) ProtoMessage()    {}
func (*AttachContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{9}
}

func (m *AttachContainerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachContainerResponse.Unmarshal(m, b)
}
func (m *AttachContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachContainerResponse.Marshal(b, m, deterministic)
}
func (m *AttachContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachContainerResponse.Merge(m, src)
}
func (m *AttachContainerResponse) XXX_Size() int {
	return xxx_messageInfo_AttachContainerResponse.Size(m)
}
func (m *AttachContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttachContainerResponse proto.InternalMessageInfo

func (m *AttachContainerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AttachContainerResponse) GetStdIn() bool {
	if m != nil {
		return m.StdIn
	}
	return false
}

func (m *AttachContainerResponse) GetWriteCommittedSize() int64 {
	if m != nil {
		return m.WriteCommittedSize
	}
	return 0
}

func (m *AttachContainerResponse) GetReadData() []byte {
	if m != nil {
		return m.ReadData
	}
	return nil
}

type StopContainerRequest struct {
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StopOptions          *containers.StopOptions `protobuf:"bytes,2,opt,name=stopOptions,proto3" json:"stopOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StopContainerRequest) Reset()         { *m = StopContainerRequest{} }
func (m *StopContainerRequest) String() string { return proto.CompactTextString(m) }
func (*StopContainerRequest) ProtoMessage()    {}
func (*StopContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{10}
}

func (m *StopContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopContainerRequest.Unmarshal(m, b)
}
func (m *StopContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopContainerRequest.Marshal(b, m, deterministic)
}
func (m *StopContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopContainerRequest.Merge(m, src)
}
func (m *StopContainerRequest) XXX_Size() int {
	return xxx_messageInfo_StopContainerRequest.Size(m)
}
func (m *StopContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopContainerRequest proto.InternalMessageInfo

func (m *StopContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StopContainerRequest) GetStopOptions() *containers.StopOptions {
	if m != nil {
		return m.StopOptions
	}
	return nil
}

type UpdateContainerRequest struct {
	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateOptions        *containers.UpdateOptions `protobuf:"bytes,2,opt,name=updateOptions,proto3" json:"updateOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateContainerRequest) Reset()         { *m = UpdateContainerRequest{} }
func (m *UpdateContainerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContainerRequest) ProtoMessage()    {}
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{11}
}

func (m *UpdateContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContainerRequest.Unmarshal(m, b)
}
func (m *UpdateContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContainerRequest.Marshal(b, m, deterministic)
}
func (m *UpdateContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainerRequest.Merge(m, src)
}
func (m *UpdateContainerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateContainerRequest.Size(m)
}
func (m *UpdateContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainerRequest proto.InternalMessageInfo

func (m *UpdateContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateContainerRequest) GetUpdateOptions() *containers.UpdateOptions {
	if m != nil {
		return m.UpdateOptions
	}
	return nil
}

type RestartContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartContainerRequest) Reset()         { *m = RestartContainerRequest{} }
func (m *RestartContainerRequest) String() string { return proto.CompactTextString(m) }
func (*RestartContainerRequest) ProtoMessage()    {}
func (*RestartContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{12}
}

func (m *RestartContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartContainerRequest.Unmarshal(m, b)
}
func (m *RestartContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartContainerRequest.Marshal(b, m, deterministic)
}
func (m *RestartContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartContainerRequest.Merge(m, src)
}
func (m *RestartContainerRequest) XXX_Size() int {
	return xxx_messageInfo_RestartContainerRequest.Size(m)
}
func (m *RestartContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartContainerRequest proto.InternalMessageInfo

func (m *RestartContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PauseContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseContainerRequest) Reset()         { *m = PauseContainerRequest{} }
func (m *PauseContainerRequest) String() string { return proto.CompactTextString(m) }
func (*PauseContainerRequest) ProtoMessage()    {}
func (*PauseContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{13}
}

func (m *PauseContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseContainerRequest.Unmarshal(m, b)
}
func (m *PauseContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseContainerRequest.Marshal(b, m, deterministic)
}
func (m *PauseContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseContainerRequest.Merge(m, src)
}
func (m *PauseContainerRequest) XXX_Size() int {
	return xxx_messageInfo_PauseContainerRequest.Size(m)
}
func (m *PauseContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseContainerRequest proto.InternalMessageInfo

func (m *PauseContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UnpauseContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnpauseContainerRequest) Reset()         { *m = UnpauseContainerRequest{} }
func (m *UnpauseContainerRequest) String() string { return proto.CompactTextString(m) }
func (*UnpauseContainerRequest) ProtoMessage()    {}
func (*UnpauseContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{14}
}

func (m *UnpauseContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnpauseContainerRequest.Unmarshal(m, b)
}
func (m *UnpauseContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnpauseContainerRequest.Marshal(b, m, deterministic)
}
func (m *UnpauseContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpauseContainerRequest.Merge(m, src)
}
func (m *UnpauseContainerRequest) XXX_Size() int {
	return xxx_messageInfo_UnpauseContainerRequest.Size(m)
}
func (m *UnpauseContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpauseContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnpauseContainerRequest proto.InternalMessageInfo

func (m *UnpauseContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RenameContainerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenameContainerRequest) Reset()         { *m = RenameContainerRequest{} }
func (m *RenameContainerRequest) String() string { return proto.CompactTextString(m) }
func (*RenameContainerRequest) ProtoMessage()    {}
func (*RenameContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{15}
}

func (m *RenameContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenameContainerRequest.Unmarshal(m, b)
}
func (m *RenameContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenameContainerRequest.Marshal(b, m, deterministic)
}
func (m *RenameContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameContainerRequest.Merge(m, src)
}
func (m *RenameContainerRequest) XXX_Size() int {
	return xxx_messageInfo_RenameContainerRequest.Size(m)
}
func (m *RenameContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenameContainerRequest proto.InternalMessageInfo

func (m *RenameContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RenameContainerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveContainerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the container should be removed disregarding its current state.
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveContainerRequest) Reset()         { *m = RemoveContainerRequest{} }
func (m *RemoveContainerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveContainerRequest) ProtoMessage()    {}
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776da4f07b3f96b9, []int{16}
}

func (m *RemoveContainerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveContainerRequest.Unmarshal(m, b)
}
func (m *RemoveContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveContainerRequest.Marshal(b, m, deterministic)
}
func (m *RemoveContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveContainerRequest.Merge(m, src)
}
func (m *RemoveContainerRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveContainerRequest.Size(m)
}
func (m *RemoveContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveContainerRequest proto.InternalMessageInfo

func (m *RemoveContainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveContainerRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func init() {
	proto.RegisterType((*ListContainersRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.ListContainersRequest")
	proto.RegisterType((*CreateContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.CreateContainerRequest")
	proto.RegisterType((*CreateContainerResponse)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.CreateContainerResponse")
	proto.RegisterType((*GetContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.GetContainerRequest")
	proto.RegisterType((*GetContainerResponse)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.GetContainerResponse")
	proto.RegisterType((*ListContainersResponse)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.ListContainersResponse")
	proto.RegisterType((*ListContainerMessage)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.ListContainerMessage")
	proto.RegisterType((*StartContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.StartContainerRequest")
	proto.RegisterType((*AttachContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.AttachContainerRequest")
	proto.RegisterType((*AttachContainerResponse)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.AttachContainerResponse")
	proto.RegisterType((*StopContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.StopContainerRequest")
	proto.RegisterType((*UpdateContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.UpdateContainerRequest")
	proto.RegisterType((*RestartContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.RestartContainerRequest")
	proto.RegisterType((*PauseContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.PauseContainerRequest")
	proto.RegisterType((*UnpauseContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.UnpauseContainerRequest")
	proto.RegisterType((*RenameContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.RenameContainerRequest")
	proto.RegisterType((*RemoveContainerRequest)(nil), "github.com.eclipse_kanto.container_management.containerm.api.services.containers.RemoveContainerRequest")
}

func init() {
	proto.RegisterFile("api/services/containers/containers.proto", fileDescriptor_776da4f07b3f96b9)
}

var fileDescriptor_776da4f07b3f96b9 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xd5, 0x34, 0x3f, 0x34, 0x37, 0x2d, 0x12, 0x43, 0xfe, 0x94, 0x0a, 0x11, 0x2c, 0x50, 0xd3,
	0x45, 0x9d, 0xaa, 0x2c, 0x41, 0x48, 0x50, 0x50, 0x85, 0x54, 0xd4, 0xca, 0xa1, 0x02, 0x15, 0x90,
	0x35, 0x8d, 0xc7, 0xc9, 0x88, 0xda, 0x63, 0x3c, 0x93, 0x42, 0x2b, 0x56, 0x2c, 0x10, 0x42, 0x88,
	0xbf, 0x67, 0x60, 0xcb, 0x83, 0xb0, 0x67, 0xc3, 0x02, 0x21, 0x96, 0xbc, 0x05, 0x9a, 0xb1, 0x13,
	0x27, 0x8d, 0x5d, 0x57, 0xfa, 0xe2, 0x76, 0x67, 0xdf, 0x7b, 0x27, 0xe7, 0xdc, 0xe3, 0x99, 0x39,
	0x57, 0x81, 0x3e, 0x09, 0xd8, 0x40, 0xd0, 0xf0, 0x9a, 0x8d, 0xa8, 0x18, 0x8c, 0xb8, 0x2f, 0x09,
	0xf3, 0x69, 0xb8, 0xf8, 0x68, 0x06, 0x21, 0x97, 0x1c, 0x9f, 0x8d, 0x99, 0x9c, 0x4c, 0x2f, 0xcd,
	0x11, 0xf7, 0x4c, 0x3a, 0xba, 0x62, 0x81, 0xa0, 0xf6, 0xe7, 0xc4, 0x97, 0xdc, 0x9c, 0x97, 0xda,
	0x1e, 0xf1, 0xc9, 0x98, 0x7a, 0xd4, 0x97, 0x49, 0xd0, 0x33, 0x49, 0xc0, 0xcc, 0x19, 0x44, 0x12,
	0x17, 0xdd, 0x57, 0x15, 0xb6, 0xbc, 0x09, 0x32, 0x80, 0x23, 0xdc, 0xee, 0x6e, 0x6a, 0x95, 0x90,
	0x3c, 0xb0, 0x79, 0x20, 0x19, 0xf7, 0x63, 0x82, 0xdd, 0xbd, 0xd4, 0xc2, 0x69, 0xe0, 0x10, 0x49,
	0xef, 0x94, 0xee, 0x8c, 0x39, 0x1f, 0x5f, 0xd1, 0x81, 0x7e, 0xbb, 0x9c, 0xba, 0x03, 0xea, 0x05,
	0xf2, 0x26, 0x4a, 0x1a, 0x6d, 0x68, 0x9e, 0x30, 0x21, 0x8f, 0xe6, 0xbf, 0x61, 0xd1, 0x2f, 0xa6,
	0x54, 0x48, 0xe3, 0x67, 0x04, 0xad, 0xa3, 0x90, 0x12, 0x49, 0xe7, 0xb9, 0x38, 0x85, 0xaf, 0xa1,
	0x36, 0xc7, 0xec, 0xa0, 0x1e, 0xea, 0xd7, 0x0f, 0x3f, 0x36, 0x9f, 0x49, 0x30, 0xdd, 0xc8, 0x82,
	0x5a, 0x66, 0x82, 0x99, 0x40, 0x19, 0xbf, 0x20, 0x68, 0xaf, 0x50, 0x12, 0x01, 0xf7, 0x05, 0x7d,
	0x32, 0x4e, 0xaf, 0xc1, 0x8b, 0xc7, 0x54, 0xae, 0x48, 0xf4, 0x3c, 0x6c, 0x30, 0x47, 0xf3, 0xa8,
	0x59, 0x1b, 0xcc, 0x31, 0x7e, 0x44, 0xd0, 0x58, 0xae, 0x7b, 0x62, 0xde, 0xbf, 0x22, 0x68, 0xdd,
	0xfd, 0xf0, 0x31, 0xa5, 0xaf, 0x00, 0x92, 0xd5, 0x1d, 0xd4, 0x2b, 0x15, 0xca, 0x69, 0x01, 0x4b,
	0xab, 0xb4, 0x44, 0xea, 0x03, 0x2a, 0x04, 0x19, 0x3f, 0x9d, 0x4a, 0xbb, 0xd0, 0x1c, 0x4a, 0x12,
	0xe6, 0x7f, 0xdf, 0xff, 0x10, 0xb4, 0xde, 0x96, 0x92, 0x8c, 0x26, 0x79, 0xa5, 0xb8, 0x09, 0x55,
	0x21, 0x1d, 0x9b, 0xf9, 0x9d, 0x8d, 0x1e, 0xea, 0x6f, 0x5a, 0x15, 0x21, 0x9d, 0xf7, 0x7d, 0xfc,
	0x0a, 0x6c, 0x7d, 0x19, 0x32, 0x75, 0x78, 0x5d, 0x57, 0x50, 0xd9, 0x29, 0xf5, 0x50, 0xbf, 0x64,
	0xd5, 0x75, 0xec, 0x54, 0x87, 0x54, 0x89, 0xcb, 0x7c, 0x26, 0x26, 0xb6, 0x8e, 0x76, 0xca, 0x7a,
	0x7d, 0x3d, 0x8a, 0x7d, 0xa4, 0x42, 0xd8, 0x80, 0x6d, 0x87, 0x48, 0x62, 0x4b, 0x1e, 0xd7, 0x40,
	0x0f, 0xf5, 0xb7, 0xac, 0xba, 0x0a, 0x7e, 0xc8, 0xa3, 0x9a, 0x97, 0xa1, 0x1e, 0x52, 0xe2, 0xcc,
	0x80, 0x2a, 0x1a, 0x08, 0x54, 0x28, 0xc6, 0x79, 0x09, 0xf4, 0x9b, 0x7d, 0xc5, 0x3c, 0x26, 0x3b,
	0x55, 0x9d, 0xaf, 0xa9, 0xc8, 0x89, 0x0a, 0x18, 0x3f, 0x21, 0x68, 0xaf, 0xf4, 0x1a, 0xef, 0x9d,
	0x07, 0x36, 0x7b, 0x00, 0x8d, 0xa8, 0xd9, 0x11, 0xf7, 0x3c, 0x26, 0x25, 0x75, 0x6c, 0xc1, 0x6e,
	0x69, 0xdc, 0x34, 0xd6, 0xb9, 0xa3, 0x59, 0x6a, 0xc8, 0x6e, 0x29, 0xde, 0x01, 0xcd, 0xc0, 0x56,
	0x8d, 0xc4, 0x4d, 0x6d, 0xaa, 0xc0, 0xbb, 0x44, 0x12, 0xe3, 0x37, 0x04, 0x8d, 0xa1, 0xe4, 0x41,
	0xae, 0xf6, 0x5f, 0x43, 0x5d, 0xdd, 0xa5, 0xa7, 0xd1, 0xfd, 0xa8, 0x39, 0xd5, 0x0f, 0x2f, 0xd6,
	0xbc, 0x93, 0x86, 0x09, 0x82, 0xb5, 0x08, 0x67, 0xfc, 0x8e, 0xa0, 0x75, 0xae, 0x6f, 0xe8, 0x5c,
	0xa2, 0xdf, 0x20, 0xd8, 0x8e, 0x2e, 0xf3, 0x65, 0xae, 0x9f, 0xae, 0x99, 0xeb, 0xf9, 0x22, 0x86,
	0xb5, 0x0c, 0x69, 0xec, 0x41, 0xdb, 0xa2, 0xe2, 0x41, 0xfb, 0x7f, 0x17, 0x9a, 0x67, 0x64, 0x2a,
	0x72, 0x1b, 0x53, 0xbf, 0x79, 0xee, 0x07, 0x0f, 0x2a, 0x7d, 0x13, 0x5a, 0x16, 0xf5, 0x89, 0x97,
	0xaf, 0x16, 0x86, 0xb2, 0xaa, 0xd3, 0x1a, 0xd5, 0x2c, 0xfd, 0x6c, 0xbc, 0xa5, 0x56, 0x7b, 0xfc,
	0x3a, 0x7f, 0x75, 0x03, 0x2a, 0x2e, 0x0f, 0x47, 0x74, 0xb6, 0x45, 0xf5, 0xcb, 0xe1, 0x1f, 0x2f,
	0x00, 0x24, 0x97, 0x23, 0xfe, 0x1b, 0x41, 0x35, 0xf2, 0x1e, 0x3c, 0x31, 0xd7, 0x3d, 0x1c, 0x98,
	0xe9, 0x46, 0xdb, 0x65, 0x8f, 0x80, 0x14, 0x1f, 0xdc, 0x3f, 0x11, 0x94, 0x8e, 0xa9, 0xc4, 0x74,
	0xfd, 0x90, 0x29, 0xfe, 0xd8, 0x75, 0x8b, 0x86, 0x89, 0xdb, 0xfa, 0x0b, 0x41, 0x59, 0x39, 0x0a,
	0x1e, 0xaf, 0x1f, 0x30, 0x75, 0x6e, 0xea, 0x4e, 0x8a, 0x07, 0x8a, 0x7b, 0xfb, 0x07, 0x01, 0xa8,
	0xd4, 0x50, 0x86, 0x94, 0x78, 0x8f, 0xd7, 0xa1, 0x5b, 0x30, 0x50, 0x6c, 0xfa, 0x07, 0x08, 0x7f,
	0x87, 0xa0, 0xa2, 0xfd, 0xb7, 0x88, 0xe6, 0x52, 0x8d, 0xbd, 0xdb, 0x32, 0xa3, 0x69, 0xd9, 0x9c,
	0x4d, 0xcb, 0xe6, 0x7b, 0x6a, 0x5a, 0xc6, 0xff, 0x22, 0xa8, 0x46, 0xa6, 0x57, 0xc4, 0xf9, 0x4f,
	0x1f, 0x1d, 0x8a, 0x38, 0xff, 0x19, 0xc6, 0xdd, 0x47, 0x07, 0x08, 0x7f, 0x8b, 0xa0, 0xac, 0xcc,
	0x0b, 0xbb, 0x45, 0xa8, 0xbd, 0x6a, 0xcf, 0x99, 0x62, 0x7f, 0x8f, 0xa0, 0x1a, 0x39, 0x53, 0x11,
	0x62, 0xa7, 0x5b, 0x70, 0x26, 0x99, 0x1f, 0x10, 0x3c, 0x17, 0xdb, 0x20, 0x2e, 0xe0, 0x83, 0x64,
	0x38, 0x6c, 0x26, 0x1d, 0x75, 0x26, 0xb4, 0xd5, 0x16, 0x71, 0x26, 0x52, 0x3d, 0xfc, 0x5e, 0x65,
	0x62, 0x33, 0x2f, 0x42, 0x99, 0x8c, 0x39, 0xe1, 0xde, 0x5d, 0x13, 0x0d, 0x0c, 0x45, 0xec, 0x9a,
	0xf4, 0x51, 0x24, 0x87, 0x8c, 0x9a, 0x3f, 0x8a, 0x21, 0x93, 0x36, 0xd9, 0x64, 0x91, 0x79, 0xe7,
	0xb3, 0x8b, 0x4f, 0x12, 0x0a, 0x83, 0x98, 0xc2, 0xbe, 0xa6, 0x90, 0xfc, 0x7b, 0xb0, 0x9f, 0x50,
	0x48, 0x82, 0xde, 0x20, 0xe3, 0x2f, 0x93, 0x37, 0x92, 0xc7, 0xcb, 0xaa, 0x86, 0x7b, 0xfd, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xa9, 0xa9, 0xb3, 0x5f, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContainersClient is the client API for Containers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainersClient interface {
	Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error)
	List(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	ListStream(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (Containers_ListStreamClient, error)
	Start(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Attach(ctx context.Context, opts ...grpc.CallOption) (Containers_AttachClient, error)
	Stop(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Restart(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Pause(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Unpause(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Rename(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Remove(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type containersClient struct {
	cc grpc.ClientConnInterface
}

func NewContainersClient(cc grpc.ClientConnInterface) ContainersClient {
	return &containersClient{cc}
}

func (c *containersClient) Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Get(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {
	out := new(GetContainerResponse)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) List(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) ListStream(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (Containers_ListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Containers_serviceDesc.Streams[0], "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/ListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &containersListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Containers_ListStreamClient interface {
	Recv() (*ListContainerMessage, error)
	grpc.ClientStream
}

type containersListStreamClient struct {
	grpc.ClientStream
}

func (x *containersListStreamClient) Recv() (*ListContainerMessage, error) {
	m := new(ListContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containersClient) Start(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Attach(ctx context.Context, opts ...grpc.CallOption) (Containers_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Containers_serviceDesc.Streams[1], "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &containersAttachClient{stream}
	return x, nil
}

type Containers_AttachClient interface {
	Send(*AttachContainerRequest) error
	Recv() (*AttachContainerResponse, error)
	grpc.ClientStream
}

type containersAttachClient struct {
	grpc.ClientStream
}

func (x *containersAttachClient) Send(m *AttachContainerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containersAttachClient) Recv() (*AttachContainerResponse, error) {
	m := new(AttachContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containersClient) Stop(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Restart(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Pause(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Unpause(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Unpause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Rename(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Remove(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainersServer is the server API for Containers service.
type ContainersServer interface {
	Create(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	Get(context.Context, *GetContainerRequest) (*GetContainerResponse, error)
	List(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	ListStream(*ListContainersRequest, Containers_ListStreamServer) error
	Start(context.Context, *StartContainerRequest) (*empty.Empty, error)
	Attach(Containers_AttachServer) error
	Stop(context.Context, *StopContainerRequest) (*empty.Empty, error)
	Update(context.Context, *UpdateContainerRequest) (*empty.Empty, error)
	Restart(context.Context, *RestartContainerRequest) (*empty.Empty, error)
	Pause(context.Context, *PauseContainerRequest) (*empty.Empty, error)
	Unpause(context.Context, *UnpauseContainerRequest) (*empty.Empty, error)
	Rename(context.Context, *RenameContainerRequest) (*empty.Empty, error)
	Remove(context.Context, *RemoveContainerRequest) (*empty.Empty, error)
}

// UnimplementedContainersServer can be embedded to have forward compatible implementations.
type UnimplementedContainersServer struct {
}

func (*UnimplementedContainersServer) Create(ctx context.Context, req *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedContainersServer) Get(ctx context.Context, req *GetContainerRequest) (*GetContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedContainersServer) List(ctx context.Context, req *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedContainersServer) ListStream(req *ListContainersRequest, srv Containers_ListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStream not implemented")
}
func (*UnimplementedContainersServer) Start(ctx context.Context, req *StartContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedContainersServer) Attach(srv Containers_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedContainersServer) Stop(ctx context.Context, req *StopContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedContainersServer) Update(ctx context.Context, req *UpdateContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedContainersServer) Restart(ctx context.Context, req *RestartContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedContainersServer) Pause(ctx context.Context, req *PauseContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedContainersServer) Unpause(ctx context.Context, req *UnpauseContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (*UnimplementedContainersServer) Rename(ctx context.Context, req *RenameContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (*UnimplementedContainersServer) Remove(ctx context.Context, req *RemoveContainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterContainersServer(s *grpc.Server, srv ContainersServer) {
	s.RegisterService(&_Containers_serviceDesc, srv)
}

func _Containers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Create(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Get(ctx, req.(*GetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).List(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_ListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListContainersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainersServer).ListStream(m, &containersListStreamServer{stream})
}

type Containers_ListStreamServer interface {
	Send(*ListContainerMessage) error
	grpc.ServerStream
}

type containersListStreamServer struct {
	grpc.ServerStream
}

func (x *containersListStreamServer) Send(m *ListContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Containers_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Start(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainersServer).Attach(&containersAttachServer{stream})
}

type Containers_AttachServer interface {
	Send(*AttachContainerResponse) error
	Recv() (*AttachContainerRequest, error)
	grpc.ServerStream
}

type containersAttachServer struct {
	grpc.ServerStream
}

func (x *containersAttachServer) Send(m *AttachContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containersAttachServer) Recv() (*AttachContainerRequest, error) {
	m := new(AttachContainerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Containers_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Stop(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Update(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Restart(ctx, req.(*RestartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Pause(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Unpause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Unpause(ctx, req.(*UnpauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Rename(ctx, req.(*RenameContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Remove(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Containers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.eclipse_kanto.container_management.containerm.api.services.containers.Containers",
	HandlerType: (*ContainersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Containers_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Containers_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Containers_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Containers_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Containers_Stop_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Containers_Update_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Containers_Restart_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Containers_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _Containers_Unpause_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Containers_Rename_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Containers_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStream",
			Handler:       _Containers_ListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Attach",
			Handler:       _Containers_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/services/containers/containers.proto",
}
