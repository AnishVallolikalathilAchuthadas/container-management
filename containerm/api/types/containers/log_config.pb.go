// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/types/containers/log_config.proto

package containers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Log configuration for the container
type LogConfiguration struct {
	// The full log driver configuration
	DriverConfig *LogDriverConfiguration `protobuf:"bytes,1,opt,name=driver_config,json=driverConfig,proto3" json:"driver_config,omitempty"`
	// The full log mode configuration
	ModeConfig           *LogModeConfiguration `protobuf:"bytes,2,opt,name=mode_config,json=modeConfig,proto3" json:"mode_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LogConfiguration) Reset()         { *m = LogConfiguration{} }
func (m *LogConfiguration) String() string { return proto.CompactTextString(m) }
func (*LogConfiguration) ProtoMessage()    {}
func (*LogConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b7770802e1d3b18, []int{0}
}

func (m *LogConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogConfiguration.Unmarshal(m, b)
}
func (m *LogConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogConfiguration.Marshal(b, m, deterministic)
}
func (m *LogConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogConfiguration.Merge(m, src)
}
func (m *LogConfiguration) XXX_Size() int {
	return xxx_messageInfo_LogConfiguration.Size(m)
}
func (m *LogConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LogConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LogConfiguration proto.InternalMessageInfo

func (m *LogConfiguration) GetDriverConfig() *LogDriverConfiguration {
	if m != nil {
		return m.DriverConfig
	}
	return nil
}

func (m *LogConfiguration) GetModeConfig() *LogModeConfiguration {
	if m != nil {
		return m.ModeConfig
	}
	return nil
}

// Configures which of the available log drivers to be used and how
type LogDriverConfiguration struct {
	// The type of the driver - json-file, none
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Max number of files before rotating the log files
	MaxFiles int64 `protobuf:"varint,2,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	// Max size of the logs in the form of 1.2M, 5k, etc.
	MaxSize string `protobuf:"bytes,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	// Specify a root directory for the container's log files to be stored
	RootDir              string   `protobuf:"bytes,4,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogDriverConfiguration) Reset()         { *m = LogDriverConfiguration{} }
func (m *LogDriverConfiguration) String() string { return proto.CompactTextString(m) }
func (*LogDriverConfiguration) ProtoMessage()    {}
func (*LogDriverConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b7770802e1d3b18, []int{1}
}

func (m *LogDriverConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogDriverConfiguration.Unmarshal(m, b)
}
func (m *LogDriverConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogDriverConfiguration.Marshal(b, m, deterministic)
}
func (m *LogDriverConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogDriverConfiguration.Merge(m, src)
}
func (m *LogDriverConfiguration) XXX_Size() int {
	return xxx_messageInfo_LogDriverConfiguration.Size(m)
}
func (m *LogDriverConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LogDriverConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LogDriverConfiguration proto.InternalMessageInfo

func (m *LogDriverConfiguration) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogDriverConfiguration) GetMaxFiles() int64 {
	if m != nil {
		return m.MaxFiles
	}
	return 0
}

func (m *LogDriverConfiguration) GetMaxSize() string {
	if m != nil {
		return m.MaxSize
	}
	return ""
}

func (m *LogDriverConfiguration) GetRootDir() string {
	if m != nil {
		return m.RootDir
	}
	return ""
}

// Configures which of the supported log modes to be applied for the chosen log driver
type LogModeConfiguration struct {
	// The logging mode - blocking, non-blocking
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// The size of the buffer used in the form of 1.2M, 5k, etc. - applicable for non-blocking mode
	MaxBufferSize        string   `protobuf:"bytes,2,opt,name=max_buffer_size,json=maxBufferSize,proto3" json:"max_buffer_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogModeConfiguration) Reset()         { *m = LogModeConfiguration{} }
func (m *LogModeConfiguration) String() string { return proto.CompactTextString(m) }
func (*LogModeConfiguration) ProtoMessage()    {}
func (*LogModeConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b7770802e1d3b18, []int{2}
}

func (m *LogModeConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogModeConfiguration.Unmarshal(m, b)
}
func (m *LogModeConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogModeConfiguration.Marshal(b, m, deterministic)
}
func (m *LogModeConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogModeConfiguration.Merge(m, src)
}
func (m *LogModeConfiguration) XXX_Size() int {
	return xxx_messageInfo_LogModeConfiguration.Size(m)
}
func (m *LogModeConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LogModeConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LogModeConfiguration proto.InternalMessageInfo

func (m *LogModeConfiguration) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *LogModeConfiguration) GetMaxBufferSize() string {
	if m != nil {
		return m.MaxBufferSize
	}
	return ""
}

func init() {
	proto.RegisterType((*LogConfiguration)(nil), "github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogConfiguration")
	proto.RegisterType((*LogDriverConfiguration)(nil), "github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogDriverConfiguration")
	proto.RegisterType((*LogModeConfiguration)(nil), "github.com.eclipse_kanto.container_management.containerm.api.types.containers.LogModeConfiguration")
}

func init() {
	proto.RegisterFile("api/types/containers/log_config.proto", fileDescriptor_9b7770802e1d3b18)
}

var fileDescriptor_9b7770802e1d3b18 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbf, 0x4b, 0x3b, 0x41,
	0x10, 0xc5, 0xb9, 0x24, 0x7c, 0xbf, 0x66, 0x63, 0x50, 0x16, 0x91, 0x88, 0x8d, 0x04, 0x14, 0x9b,
	0xec, 0x81, 0x96, 0x76, 0x31, 0x58, 0x25, 0xcd, 0xd9, 0x48, 0x9a, 0x63, 0x73, 0x37, 0x77, 0x0e,
	0x66, 0x6f, 0x8e, 0xbd, 0x8d, 0x9c, 0x69, 0x6c, 0xac, 0xfc, 0x43, 0xfc, 0x3b, 0x65, 0x37, 0x3f,
	0xd6, 0x40, 0xca, 0x74, 0x6f, 0xdf, 0xb0, 0xf3, 0x79, 0x3c, 0x86, 0x5d, 0xcb, 0x12, 0x43, 0xf3,
	0x51, 0x42, 0x15, 0x26, 0x54, 0x18, 0x89, 0x05, 0xe8, 0x2a, 0x9c, 0x53, 0x1e, 0x27, 0x54, 0x64,
	0x98, 0x8b, 0x52, 0x93, 0x21, 0x3e, 0xc9, 0xd1, 0xbc, 0x2e, 0x66, 0x22, 0x21, 0x25, 0x20, 0x99,
	0x63, 0x59, 0x41, 0xfc, 0x26, 0x0b, 0x43, 0x62, 0xfb, 0x2b, 0x56, 0xb2, 0x90, 0x39, 0x28, 0x28,
	0x8c, 0x37, 0x95, 0x90, 0x25, 0x0a, 0xb7, 0xdf, 0x9b, 0x55, 0xff, 0xa7, 0xc1, 0x4e, 0xc7, 0x94,
	0x3f, 0x3a, 0xc4, 0x42, 0x4b, 0x83, 0x54, 0xf0, 0xef, 0x80, 0x75, 0x53, 0x8d, 0xef, 0xa0, 0xd7,
	0xec, 0x5e, 0x70, 0x15, 0xdc, 0x76, 0xee, 0x40, 0x1c, 0x14, 0x2e, 0xc6, 0x94, 0x8f, 0x1c, 0x66,
	0x07, 0x1f, 0x1d, 0xa7, 0x7f, 0x4c, 0xfe, 0x15, 0xb0, 0x8e, 0xa2, 0x14, 0x36, 0x51, 0x1a, 0x2e,
	0x4a, 0x72, 0xf8, 0x28, 0x13, 0x4a, 0x61, 0x37, 0x08, 0x53, 0x5b, 0xab, 0xff, 0xc9, 0xce, 0xf7,
	0xc7, 0xe5, 0x9c, 0xb5, 0xec, 0x3a, 0xd7, 0x51, 0x3b, 0x72, 0x9a, 0x5f, 0xb2, 0xb6, 0x92, 0x75,
	0x9c, 0xe1, 0x1c, 0x2a, 0x97, 0xb8, 0x19, 0x1d, 0x29, 0x59, 0x3f, 0xd9, 0x37, 0xbf, 0x60, 0x56,
	0xc7, 0x15, 0x2e, 0xa1, 0xd7, 0x74, 0x9f, 0xfe, 0x2b, 0x59, 0x3f, 0xe3, 0x12, 0xec, 0x48, 0x13,
	0x99, 0x38, 0x45, 0xdd, 0x6b, 0xad, 0x46, 0xf6, 0x3d, 0x42, 0xdd, 0x8f, 0xd8, 0xd9, 0xbe, 0x90,
	0x16, 0x6f, 0x63, 0x6e, 0xf0, 0x56, 0xf3, 0x1b, 0x76, 0x62, 0x09, 0xb3, 0x45, 0x96, 0x81, 0x5e,
	0x81, 0x1a, 0x6e, 0xdc, 0x55, 0xb2, 0x1e, 0x3a, 0xd7, 0xe2, 0x86, 0xd3, 0xe9, 0x8b, 0xaf, 0x31,
	0x5c, 0xd7, 0x38, 0x70, 0x35, 0xfa, 0x23, 0x1c, 0xf8, 0x1a, 0xbd, 0xa9, 0xc2, 0x7d, 0xe7, 0xfa,
	0xe0, 0xe5, 0xec, 0x9f, 0xbb, 0xd7, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x19, 0x17,
	0x05, 0xd8, 0x02, 0x00, 0x00,
}
